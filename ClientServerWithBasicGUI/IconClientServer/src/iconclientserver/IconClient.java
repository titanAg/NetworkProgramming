// Kyle Orcutt 

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iconclientserver;

import java.awt.image.*;
import java.io.*;
import java.net.*;
import java.nio.ByteBuffer;
import javax.imageio.*;
import javax.swing.*;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;

/**
 *
 * @author Kyle
 */
public class IconClient extends javax.swing.JFrame {
    final protected int PORT = 4445;
    protected static String ipArg = "";
    /**
     * Creates new form IconClient1
     */
    public IconClient() {
        initComponents();
        // Set UI title, position, and size
        setTitle("Icon Selector");
        setBounds(700,450, this.getWidth(),this.getHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        ok = new javax.swing.JButton();
        inputLabel = new javax.swing.JLabel();
        inputField = new javax.swing.JTextField();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ok.setText("Ok");
        ok.setAlignmentY(0.0F);
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        inputLabel.setText("Please enter a selection between 1-3:");

        inputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inputLabel)
                .addGap(18, 18, 18)
                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputLabel))
                .addGap(18, 18, 18)
                .addComponent(ok)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        int input = 0;
        try{
            input = Integer.parseInt(inputField.getText());
            
            if (input >= 1 && input <= 3) {
                try {
                    
                    // Convert input for transfer to network
                    ByteBuffer b = ByteBuffer.allocate(input);
                    byte[] outBuf = new byte[256];
                    outBuf = b.array();
                    
                    // Get a datagram socket
                    DatagramSocket dsocket = new DatagramSocket();
                    
                    System.out.println("Sending request for image " + input + " from server...\n");

                    // Send request
                    InetAddress address = InetAddress.getByName(ipArg);
                    
                    if (!hostAvailabilityCheck(address, PORT)) 
                        System.out.println("BAD BAD");
                    
                    DatagramPacket packet = new DatagramPacket(outBuf, outBuf.length, address, PORT);
                    dsocket.send(packet);
                    
                    System.out.println("Request sent to server...\n");
                    
                    // Get response
                    byte[] inBuf = new byte[4096];
                    packet = new DatagramPacket(inBuf, inBuf.length);
                    dsocket.receive(packet);
                    
                    String imageString = "newbug" + input + ".gif";
                    System.out.println("Image received from server: " + imageString + "\n");
                    
                    // Convert image response from server
                    ByteArrayInputStream bis = new ByteArrayInputStream(inBuf);
                    BufferedImage image = ImageIO.read(bis);
                    ImageIO.write(image, "gif", new File(imageString) );
                    
                    // Display image response
                    ImageIcon icon = new ImageIcon(imageString);
                    // Note - Not sure why the ok button is not centered - it should be based on documentation
                    showMessageDialog(jPanel1, "You selected newbug" + input + "\nHave a good one!", "Display an icon", JOptionPane.INFORMATION_MESSAGE, icon);
                    
                    dsocket.close();
                }
                catch (IOException ioe) {
                    System.out.println(ioe);
                }
            }
            else {
                throw new NumberFormatException();
            }
        }catch(NumberFormatException nfe){
            System.out.println(nfe + "\n");
            showMessageDialog(jPanel1, "Invalid input:  \"" + inputField.getText() + "\"", "Input Error", ERROR_MESSAGE);
        }
        inputField.setText("");
        
    }//GEN-LAST:event_okActionPerformed

    private void inputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFieldActionPerformed

    public static boolean hostAvailabilityCheck(InetAddress address, int port) { 
    try (Socket s = new Socket(address, port)) {
        return true;
    } catch (IOException ex) {
        /* ignore */
    }
    return false;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IconClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IconClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IconClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IconClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        if (args.length != 1) {
             System.out.println("Usage: java IconClient <hostname>");
             System.out.println("Please provide argument: IP");
             return;
        }
        
        ipArg = args[0];
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IconClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputField;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton ok;
    // End of variables declaration//GEN-END:variables
}
